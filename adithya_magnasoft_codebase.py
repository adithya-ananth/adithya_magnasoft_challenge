# -*- coding: utf-8 -*-
"""Adithya_Magnasoft_Challenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18TpLIY9gSQv_rxMs8x8L34_SYDomUwTy

# Install required libraries
"""

!pip install opencv-python easyocr opencv-python-headless

"""# Import required libraries"""

import easyocr
import cv2
import re
import csv
import os

"""# Pre-processing image"""

def preprocess_image(image_path):
    # Load the image without changing its colour channels
    image = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)

    # Handle alpha channel (transparency) in the image
    if image.shape[-1] == 4:  # Image has an alpha channel
        # Convert BGRA image to BGR
        image = cv2.cvtColor(image, cv2.COLOR_BGRA2BGR)

    # Handle invalid image
    if image is None:
        raise ValueError(f'Image {image_path} not found')

    # Convert image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Remove noise form image using Non-Local Means Denoising
    noise_removed = cv2.fastNlMeansDenoising(gray_image, h=10)

    # Apply thresholding using Otsu's Bianrization
    threshold_value, processed_image = cv2.threshold(noise_removed, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    return processed_image

"""# Model inference"""

def extract_text(image_path):
    # Pre-process image
    processed_image = preprocess_image(image_path)

    # Initialize EasyOCR reader with the 'number-dense' model for improved numeric OCR accuracy.
    reader = easyocr.Reader(['en'], model_storage_directory='.', gpu=False, user_network_directory='number_dense')

    # Apply OCR to extract text
    results = reader.readtext(processed_image, detail=0, paragraph=False)

    return results

"""# Post-processing image"""

def postprocess_image(results):
    numbers = []

    # Iterate through the extracted text
    for text in results:
        # Use regex to extract numbers and decimals
        matches = re.findall(r'\d*\.?\d+', text)

        # Handle edge cases like ".5", "99."
        for match in matches:
            if match.startswith('.'):
                match += '0'
            if match.endswith('.'):
                match = match[:-1]

            # Validate numeric format
            if re.match(r'^\d+$', match) or re.match(r'^\d+\.\d+$', match):
                numbers.append(match)

    return numbers

"""# Executing the main function"""

def main():
    # Folder containing images
    input_folder = '/content/images'

    # Create csv file as output
    output = 'extracted_numbers.csv'

    # Get a list of images with .jpg, .jpeg, or .png extensions
    image_files = [f for f in os.listdir(input_folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

    # Open csv file in writing mode
    with open(output, 'w', newline='') as csvfile:
        # Create writer object
        writer = csv.writer(csvfile)

        # Write headings of both columns
        writer.writerow(['Image Name', 'Extracted Numbers'])

        # Iterate through list of images
        for image_file in image_files:
            # Append file name to folder name and cosntruct full image path
            image_path = os.path.join(input_folder, image_file)

            # Try-except block
            try:
                # Extract text from image
                numbers = extract_text(image_path)

                # Post-process output
                final_numbers = postprocess_image(numbers)

                # Wrap each number/decimal in double quotations
                formatted_numbers = [f'"{num}"' for num in final_numbers]

                # Write the row into the csv file
                writer.writerow([image_file, ', '.join(formatted_numbers)])
            # Handle errors during image processing
            except Exception as e:
                print(f"Error processing {image_file}: {e}")

if __name__ == '__main__':
    main()